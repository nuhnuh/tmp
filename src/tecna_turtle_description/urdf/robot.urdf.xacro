<?xml version="1.0"?>
<robot name="agent" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:include filename="$(find tecna_turtle_description)/urdf/common_properties.xacro"/>
  <xacro:include filename="$(find tecna_turtle_description)/urdf/sensors/pf_r2000.urdf.xacro"/>


  <!-- properties -->

  <xacro:property name="chassis_width"  value="0.8"/>
  <xacro:property name="chassis_length" value="1.436"/>
  <xacro:property name="chassis_height" value="0.02"/>
  <xacro:property name="chassis_mass"   value="1"/>

  <xacro:property name="chassis_offset" value=".5"/> <!-- distance from rotation center of the vehicle to the chassis center -->
  <xacro:property name="caster_wheel_offset"   value="1.0"/> <!-- distance from rotation center of the vechicle to the caster wheel -->

  <xacro:property name="wheel_radius" value="0.171"/> <!-- ackermann_ctrlr_params.yaml must be also updated -->
  <xacro:property name="wheel_width"  value="0.114"/>
  <xacro:property name="wheel_mass"   value="1"/>

  <xacro:property name="lidar_x" value="1.0"/>
  <xacro:property name="lidar_y" value="0"/>
  <xacro:property name="lidar_z" value="2"/>


  <!-- macros -->

  <!-- tecna_turtle chassis -->
  <xacro:macro name="chassis">

    <!-- base_link -->
    <!-- TIP: link name conventions: http://www.ros.org/reps/rep-0105.html -->
    <link name="base_link">
      <visual>
        <!-- base_link must have geometry so that its axes can be displayed in rviz. -->
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
        <material name="white"/>
      </visual>
    </link>
    <gazebo reference="base_link">
      <material>Gazebo/Green</material>
    </gazebo>

    <!-- chassis -->
    <joint name="chassis_joint" type="fixed">
      <parent link="base_link"/>
      <child link="chassis"/>
      <origin xyz="${chassis_offset} 0 0" rpy="0 0 0"/>
    </joint>
    <link name="chassis">
      <visual>
        <geometry>
          <box size="${chassis_length} ${chassis_width-wheel_width} ${chassis_height}"/>
        </geometry>
        <material name="red"/>
      </visual>
      <collision>
        <geometry>
          <box size="${chassis_length} ${chassis_width-wheel_width} ${chassis_height}"/>
        </geometry>
      </collision> 
      <xacro:solid_cuboid_inertial width="${chassis_width-wheel_width}" length="${chassis_length}" height="${chassis_height}" mass="${chassis_mass}"/>
    </link>
    <gazebo reference="chassis">
      <material>Gazebo/RedBright</material>
    </gazebo>

  </xacro:macro> <!-- tecna_turtle chassis -->

  <!-- caster wheel -->
  <xacro:macro name="caster_wheel">
    <joint name="caster_wheel_joint" type="fixed">
      <parent link="base_link"/>
      <child link="caster_wheel"/>
      <origin xyz = "${caster_wheel_offset} 0 0" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
    </joint>
    <link name="caster_wheel">
      <visual>
        <origin rpy="0 0 0"/>
        <geometry>
          <sphere radius="${wheel_radius}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <geometry>
          <sphere radius="${wheel_radius}"/>
        </geometry>
      </collision>
    </link>
    <gazebo reference="caster_wheel">
      <material>Gazebo/DarkGrey</material>
    </gazebo>
  </xacro:macro> <!-- caster wheel -->

  <!-- wheel (left and right) -->
  <!-- lr_reflect {left: +1, right: -1} -->
  <xacro:macro name="wheel" params="lr_prefix lr_reflect">
    <joint name="${lr_prefix}_wheel_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${lr_prefix}_wheel"/>
      <origin xyz = "0 ${lr_reflect*chassis_width/2} 0" rpy="${-degrees_90} 0 0"/>
      <axis xyz="0 0 1"/>
    </joint>
    <link name="${lr_prefix}_wheel">
      <visual>
        <origin rpy="${degrees_90 - lr_reflect * degrees_90} 0 0"/> <!-- right wheel is link left wheel on a mirror -->
        <geometry>
          <mesh filename="package://tecna_turtle_description/meshes/wheel.stl" scale="${wheel_radius} ${wheel_radius} ${wheel_width}"/>
          <!--
          <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
          -->
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <geometry>
          <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
        </geometry>
      </collision>
      <xacro:thick_walled_tube_inertial outer_rad="${wheel_radius}" inner_rad="${wheel_radius/2}" height="${wheel_width}" mass="${wheel_mass}"/>
    </link>
    <gazebo reference="${lr_prefix}_wheel">
      <material>Gazebo/DarkGrey</material>
    </gazebo>
  </xacro:macro> <!-- wheel -->


  <!-- main -->

  <!-- vehicle -->
  <xacro:chassis/>
  <xacro:caster_wheel/>
  <xacro:wheel lr_prefix="left"  lr_reflect="+1"/>
  <xacro:wheel lr_prefix="right" lr_reflect="-1"/>
  <gazebo>
    <plugin name="tecna_turtle_controller" filename="libgazebo_ros_diff_drive.so">
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <odometrySource>world</odometrySource>
      <publishOdomTF>false</publishOdomTF>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishTf>true</publishTf>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <updateRate>30</updateRate>
      <leftJoint>left_wheel_joint</leftJoint>
      <rightJoint>right_wheel_joint</rightJoint>
      <wheelSeparation>${chassis_width}</wheelSeparation>
      <wheelDiameter>${2*wheel_radius}</wheelDiameter>
      <wheelAcceleration>1</wheelAcceleration>
      <wheelTorque>10</wheelTorque>
      <rosDebugLevel>na</rosDebugLevel>
    </plugin>
  </gazebo>

  <!-- lidar sensor -->
  <sensor_lidar_pf_r2000/>

</robot>
